package com.alexdsteele.chip8emulator.model;

public class Memory {

  public static final int[] DEFAULT_FONT = {
      0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
      0x20, 0x60, 0x20, 0x20, 0x70, // 1
      0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
      0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
      0x90, 0x90, 0xF0, 0x10, 0x10, // 4
      0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
      0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
      0xF0, 0x10, 0x20, 0x40, 0x40, // 7
      0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
      0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
      0xF0, 0x90, 0xF0, 0x90, 0x90, // A
      0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
      0xF0, 0x80, 0x80, 0x80, 0xF0, // C
      0xE0, 0x90, 0x90, 0x90, 0xE0, // D
      0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
      0xF0, 0x80, 0xF0, 0x80, 0x80  // F
  };

  private final byte[] memory;

  public Memory() {
    memory = new byte[0x1000];
    loadFonts();
  }

  private void loadFonts() {
    for (int i = 0x50; i < 0x9F; i++) {
      memory[i] = (byte) DEFAULT_FONT[i - 0x50];
    }
  }

  public void setByte(int idx, byte data) {
    memory[idx] = data;
  }

  public void setBytes(int idx, byte[] data) {
    for (int i = 0; i < data.length; i++) {
      setByte(idx + i, data[i]);
    }
  }

  public void loadProgram(byte[] data) {
    setBytes(0x200, data);
  }

  public byte getByte(int idx) {
    return memory[idx];
  }
}
